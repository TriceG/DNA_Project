#import random to generate nucleotides later
import random

#declare nucleotides
A = ("Adenine")
T = ("Thymine")
C = ("Cytosine")
G = ("Guanine")
U = ("Uracil")

#put nucleotides into a list
nucleotide_list = [A, T, C, G, U]

#randomly select a nucleotide to be nucleotide_1 from the nucleotide_list
nucleotide_1 = random.choice(nucleotide_list)

#declare size of nucleotides
n1Size = 30
ASize = 30
TSize = 30
CSize = 30
GSize = 30
USize = 30

#declare nucleotide colours
n1color = color(0,0,0)
Acolor = color(50,10,180)
Tcolor = color(100,180,100)
Ccolor = color(250,80,200)
Gcolor = color(250,140,40)
Ucolor = color(240,0,0)

#declare mouse over booleans
overA = False
overT = False
overC = False
overG = False
overU = False

#declare correct/incorrect answer counts
correct = 0
incorrect = 0


#game setup
def setup():
    
    #declare default size and background
    size (800, 500)
    background (255)
    
    #nucleotide 1 position
    global n1X, n1Y
    n1X = width / 2 - n1Size - 10
    n1Y = height / 8 - n1Size / 2
     
    #nucleotide A position
    global AX, AY
    AX = width / 1.55 - ASize - 10
    AY = height / 2 - ASize / 2
    
    #nucleotide T position
    global TX, TY
    TX = width / 2 - TSize - 10
    TY = height / 2 - TSize / 2
    
    #nucleotide C position
    global CX, CY
    CX = width / 2.7 - CSize - 10
    CY = height / 2 - CSize / 2
    
    #nucleotide G position
    global GX, GY
    GX = width / 4 - GSize - 10
    GY = height / 2 - GSize / 2
    
    #nucleotide U position
    global UX, UY
    UX = width / 1.3 - USize - 10
    UY = height / 2 - USize / 2
    
#draw game content
def draw():
    
    #make background slightly shaded
    background (200)
    
    #draw correct/incorrect counters
    fill(n1color)
    textSize(30)
    text("Correct: ", 480, 70)
    text(correct, 600, 70)
    text("Incorrect: ", 458, 100)
    text(incorrect, 600, 100)
    
    #Draws, colors, and names nucleotide_1
    stroke(255)
    fill(n1color)
    rect(n1X,n1Y,n1Size,n1Size)
    for n in nucleotide_list:
        if nucleotide_1 == A:
            textSize(30)
            text ("A", 365, 110)
        elif nucleotide_1 == T:
            textSize(30)
            text ("T", 365, 110)
        elif nucleotide_1 == C:
            textSize(30)
            text ("C", 365, 110)
        elif nucleotide_1 == G:
            textSize(30)
            text ("G", 365, 110)
        elif nucleotide_1 == U:
            textSize(30)
            text ("U", 365, 110)
    
    #Draws, colors, and names nucleotide A
    updateA(mouseX, mouseY)
    if overA:
        fill(Acolor)
    else:
        fill(Acolor)
    rect(AX,AY,ASize,ASize)
    textSize(30)
    text("A",482,230)
    
    #Draws, colors, and names nucleotide T
    updateT(mouseX, mouseY)
    if overT:
        fill(Tcolor)
    else:
        fill(Tcolor)
    rect(TX,TY,TSize,TSize)
    textSize(30)
    text("T",367,230)
    
    #Draws, colors, and names nucleotide C
    updateC(mouseX, mouseY)
    if overC:
        fill(Ccolor)
    else:
        fill(Ccolor)
    rect(CX,CY,CSize,CSize)
    textSize(30)
    text("C",260,230)
    
    #Draws, colors, and names nucleotide G
    updateG(mouseX, mouseY)
    if overG:
        fill(Gcolor)
    else:
        fill(Gcolor)
    rect(GX,GY,GSize,GSize)
    textSize(30)
    text("G",165,230)
    
    #Draws, colors, and names nucleotide U
    updateU(mouseX, mouseY)
    if overU:
        fill(Ucolor)
    else:
        fill(Ucolor)
    rect(UX,UY,USize,USize)
    textSize(30)
    text("U",580,230)
    
#logic for button checking of nucleotide A
def checkA (x, y, width, height):
    return x <= mouseX <= x + width and y <= mouseY <= y + height

#Checks for mouse over nucleotide A
def updateA(x, y):
    global overA
    overA = checkA (AX,AY,ASize,ASize)
 
#logic for button checking of nucleotide T
def checkT (x, y, width, height):
    return x <= mouseX <= x + width and y <= mouseY <= y + height

#Checks for mouse over nucleotide T
def updateT(x, y):
    global overT
    overT = checkT (TX,TY,TSize,TSize)

#logic for button checking of nucleotide C
def checkC (x, y, width, height):
    return x <= mouseX <= x + width and y <= mouseY <= y + height
 
#Checks for mouse over nucleotide C
def updateC(x, y):
    global overC
    overC = checkC (CX,CY,CSize,CSize)

#logic for button checking of nucleotide G    
def checkG (x, y, width, height):
    return x <= mouseX <= x + width and y <= mouseY <= y + height

#Checks for mouse over nucleotide G
def updateG(x, y):
    global overG
    overG = checkG (GX,GY,GSize,GSize)

#logic for button checking of nucleotide U    
def checkU (x, y, width, height):
    return x <= mouseX <= x + width and y <= mouseY <= y + height

#Checks for mouse over nucleotide U
def updateU(x, y):
    global overU
    overU = checkU (UX,UY,USize,USize)

#checks for mouse clicks on the nucleotides
def mousePressed():
    
        #declaring nucleotide_1, correct, and incorrect to be continuously used in mousePressed()
        global nucleotide_1
        global correct, incorrect
        
        #checks if user clicked A to match with T or U, correct += 1 or incorrect += 1, generates a new nucleotide either way
        if overA:
            if nucleotide_1 == T or nucleotide_1 == U:
                correct += 1
                nucleotide_1 = random.choice(nucleotide_list)
            else:
                incorrect += 1
                nucleotide_1 = random.choice(nucleotide_list)
                
        #checks if user clicked T to match with A, correct += 1 or incorrect += 1, generates a new nucleotide either way      
        elif overT:
            if nucleotide_1 == A:
                correct += 1
                nucleotide_1 = random.choice(nucleotide_list)
            else: 
                incorrect += 1 
                nucleotide_1 = random.choice(nucleotide_list)
                
        #checks if user clicked C to match with G, correct += 1 or incorrect += 1, generates a new nucleotide either way       
        elif overC:
            if nucleotide_1 == G:
                correct += 1
                nucleotide_1 = random.choice(nucleotide_list)
            else: 
                incorrect += 1
                nucleotide_1 = random.choice(nucleotide_list)
        
        #checks if user clicked G to match with C, correct += 1 or incorrect += 1, generates a new nucleotide either way        
        elif overG:
            if nucleotide_1 == C:
                correct += 1
                nucleotide_1 = random.choice(nucleotide_list)
            else: 
                incorrect += 1
                nucleotide_1 = random.choice(nucleotide_list)
        
        #checks if user clicked U to match with A, correct += 1 or incorrect += 1, generates a new nucleotide either way   
        elif overU:
            if nucleotide_1 == A:
                correct += 1
                nucleotide_1 = random.choice(nucleotide_list)
            else: 
                incorrect += 1
                nucleotide_1 = random.choice(nucleotide_list)
